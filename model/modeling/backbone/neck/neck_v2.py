import torch
from torch import nn
import torch.nn.functional as F
import fvcore.nn.weight_init as weight_init
import math

from detectron2.modeling.backbone import Backbone
from detectron2.layers import Conv2d, ShapeSpec, get_norm

__all__ = ["MyFPN"]


##保留FPN结构，再进行HIM, FPN之后的特征是P3，P4，P5，对三层特征进行融合。
class MyFPN(Backbone):
    """
    This module implements :paper:`FPN`.
    It creates pyramid features built on top of some input feature maps.
    """

    _fuse_type: torch.jit.Final[str]

    def __init__(
        self, bottom_up, in_features, out_channels, norm="", top_block=None, fuse_type="sum"
    ):
        """
        Args:
            bottom_up (Backbone): module representing the bottom up subnetwork.
                Must be a subclass of :class:`Backbone`. The multi-scale feature
                maps generated by the bottom up network, and listed in `in_features`,
                are used to generate FPN levels.
            in_features (list[str]): names of the input feature maps coming
                from the backbone to which FPN is attached. For example, if the
                backbone produces ["res2", "res3", "res4"], any *contiguous* sublist
                of these may be used; order must be from high to low resolution.
            out_channels (int): number of channels in the output feature maps.
            norm (str): the normalization to use.
            top_block (nn.Module or None): if provided, an extra operation will
                be performed on the output of the last (smallest resolution)
                FPN output, and the result will extend the result list. The top_block
                further downsamples the feature map. It must have an attribute
                "num_levels", meaning the number of extra FPN levels added by
                this block, and "in_feature", which is a string representing
                its input feature (e.g., p5).
            fuse_type (str): types for fusing the top down features and the lateral
                ones. It can be "sum" (default), which sums up element-wise; or "avg",
                which takes the element-wise mean of the two.
        """
        super(MyFPN, self).__init__()
        assert isinstance(bottom_up, Backbone)
        assert in_features, in_features

        # Feature map strides and channels from the bottom up network (e.g. ResNet)
        input_shapes = bottom_up.output_shape()
        strides = [input_shapes[f].stride for f in in_features]
        in_channels_per_feature = [input_shapes[f].channels for f in in_features]
        out_channels = 384

        _assert_strides_are_log2_contiguous(strides)
        lateral_convs = []
        output_convs = []

        use_bias = norm == ""
        for idx, in_channels in enumerate(in_channels_per_feature):
            lateral_norm = get_norm(norm, out_channels)
            output_norm = get_norm(norm, 256)

            lateral_conv = Conv2d(
                in_channels, out_channels, kernel_size=1, bias=use_bias, norm=lateral_norm
            )
            output_conv = Conv2d(
                out_channels,
                256,
                kernel_size=3,
                stride=1,
                padding=1,
                bias=use_bias,
                norm=output_norm,
            )
            weight_init.c2_xavier_fill(lateral_conv)
            weight_init.c2_xavier_fill(output_conv)
            stage = int(math.log2(strides[idx]))
            self.add_module("fpn_lateral{}".format(stage), lateral_conv)
            self.add_module("fpn_output{}".format(stage), output_conv)

            lateral_convs.append(lateral_conv)
            output_convs.append(output_conv)

        self.group_convs_1 = []
        self.group_convs_2 = []
        self.cascade_convs_1 = []
        self.cascade_convs_2 = []
        for idx in range(6):
            group_conv = nn.Sequential(
                nn.AdaptiveAvgPool2d((1, 1)),
                nn.Conv2d(out_channels, out_channels, kernel_size=1, stride=1, padding=0),
                nn.BatchNorm2d(out_channels),
                nn.ReLU(),
                nn.Conv2d(out_channels, out_channels * out_channels, kernel_size=1, stride=1, padding=0),
            )
            cascade_conv = nn.Sequential(
                nn.Conv2d(out_channels, out_channels, kernel_size=3, stride=1, padding=1),
                nn.BatchNorm2d(out_channels),
                nn.ReLU(),
                nn.Conv2d(out_channels, out_channels, kernel_size=3, stride=1, padding=1),
                nn.BatchNorm2d(out_channels),
                nn.ReLU(),
            )

            for modules in [
                group_conv, cascade_conv
            ]:
                for l in modules.modules():
                    if isinstance(l, nn.Conv2d):
                        torch.nn.init.normal_(l.weight, std=0.01)
                        torch.nn.init.constant_(l.bias, 0)

            self.add_module("g_c_{}".format(idx), group_conv)
            self.add_module("c_c_{}".format(idx), cascade_conv)
            if idx<3:
                self.group_convs_1.append(group_conv)
                self.cascade_convs_1.append(cascade_conv)
            else:
                self.group_convs_2.append(group_conv)
                self.cascade_convs_2.append(cascade_conv)

        # Place convs into top-down order (from low to high resolution)
        # to make the top-down computation in forward clearer.
        self.lateral_convs = lateral_convs[::-1]
        self.output_convs = output_convs[::-1]
        self.top_block = top_block
        self.in_features = tuple(in_features)
        self.bottom_up = bottom_up
        # Return feature names are "p<stage>", like ["p2", "p3", ..., "p6"]
        self._out_feature_strides = {"p{}".format(int(math.log2(s))): s for s in strides}
        # top block output feature maps.
        if self.top_block is not None:
            for s in range(stage, stage + self.top_block.num_levels):
                self._out_feature_strides["p{}".format(s + 1)] = 2 ** (s + 1)

        self._out_features = list(self._out_feature_strides.keys())
        self._out_feature_channels = {k: 256 for k in self._out_features}
        self._size_divisibility = strides[-1]
        assert fuse_type in {"avg", "sum"}
        self._fuse_type = fuse_type

    @property
    def size_divisibility(self):
        return self._size_divisibility

    def forward(self, x):
        """
        Args:
            input (dict[str->Tensor]): mapping feature map name (e.g., "res5") to
                feature map tensor for each feature level in high to low resolution order.

        Returns:
            dict[str->Tensor]:
                mapping from feature map name to FPN feature map tensor
                in high to low resolution order. Returned feature names follow the FPN
                paper convention: "p<stage>", where stage has stride = 2 ** stage e.g.,
                ["p2", "p3", ..., "p6"].
        """
        bottom_up_features = self.bottom_up(x)
        results = []
        prev_features = self.lateral_convs[0](bottom_up_features[self.in_features[-1]])
        results.append(prev_features)

        # Reverse feature maps into top-down order (from low to high resolution)
        for idx, lateral_conv in enumerate(self.lateral_convs):
            # Slicing of ModuleList is not supported https://github.com/pytorch/pytorch/issues/47336
            # Therefore we loop over all modules but skip the first one
            if idx > 0:
                features = self.in_features[-idx - 1]
                features = bottom_up_features[features]
                top_down_features = F.interpolate(prev_features, scale_factor=2.0, mode="nearest")
                lateral_features = lateral_conv(features)
                prev_features = lateral_features + top_down_features
                if self._fuse_type == "avg":
                    prev_features /= 2
                results.insert(0, prev_features)
        layer_1 = self.cfg(results, self.group_convs_1, self.cascade_convs_1)
        layer_2 = self.cfg(layer_1, self.group_convs_2, self.cascade_convs_2)
        y = self.cascade(layer_1, layer_2)

        if self.top_block is not None:
            if self.top_block.in_feature in bottom_up_features:
                top_block_in_feature = bottom_up_features[self.top_block.in_feature]
            else:
                top_block_in_feature = y[self._out_features.index(self.top_block.in_feature)]
            y.extend(self.top_block(top_block_in_feature))
        assert len(self._out_features) == len(y)
        return {f: res for f, res in zip(self._out_features, y)}

    def output_shape(self):
        return {
            name: ShapeSpec(
                channels=self._out_feature_channels[name], stride=self._out_feature_strides[name]
            )
            for name in self._out_features
        }

    def cascade(self, layer_1, layer_2):
        results = []
        for idx, (pl, pll) in enumerate(zip(layer_1, layer_2)):
            # p = self.cascade_convs[idx](pl)*pl + self.cascade_convs[idx+3](pll)*pll
            results.append(self.output_convs[idx](pll))
        return results

    def cfg(self, x, group_convs, cascade_convs):
        results_d = []
        results = []
        for i in range(len(x)):
            y = self.feature_group(x[i], group_convs[i])
            y = y.split((128, 128, 128), 1)
            results_d.append(y)

        for idx, (x_c3, x_c4, x_c5) in enumerate(zip(results_d[0], results_d[1], results_d[2])):
            if idx == 0:
                x_c3 = F.interpolate(x_c3, scale_factor=1/4.0, mode="nearest")
                x_c4 = F.interpolate(x_c4, scale_factor=1/2.0, mode="nearest")
            elif idx == 1:
                x_c3 = F.interpolate(x_c3, scale_factor=1 / 2.0, mode="nearest")
                x_c5 = F.interpolate(x_c5, scale_factor=2.0, mode="nearest")
            else:
                x_c4 = F.interpolate(x_c4, scale_factor=2.0, mode="nearest")
                x_c5 = F.interpolate(x_c5, scale_factor=4.0, mode="nearest")
            p = torch.cat((x_c3, x_c4, x_c5), dim=1)
            results.insert(0, cascade_convs[idx](p))
        return results

    def feature_group(self, x, model):
        b, c, w, h = x.size()
        x_s = x.view(b, c, -1)
        m = model(x)
        m = m.view(b, c, c)
        m = m@x_s
        y = m.view(b, c, w, h)
        return y


def _assert_strides_are_log2_contiguous(strides):
    """
    Assert that each stride is 2x times its preceding stride, i.e. "contiguous in log2".
    """
    for i, stride in enumerate(strides[1:], 1):
        assert stride == 2 * strides[i - 1], "Strides {} {} are not log2 contiguous".format(
            stride, strides[i - 1]
        )